type Query {
	getName: String!
	me: User!
	users(letter: String): [User!]!
	post: Post!
	posts(query: String): [Post!]!
	comments(skip: Int, take: Int): [Comment!]!
	takeArgument(msg: String): String!
	addFloats(nums: [Float!]!): Float
}
type Mutation {
	count(data: Int): Int!
	createUser(data: CreateUserInput!): User!
	deleteUser(userId: ID!): User!
	updateUser(id: ID!, data: UpdateUserInput!): User!
	createPost(data: CreatePostInput!): Post!
	deletePost(postId: ID!): Post!
	updatePost(id: ID!, authorId: ID!, data: UpdatePostInput!): Post!
	createComment(data: CreateCommentInput!): Comment!
	updateComment(id: ID!, text: String!): Comment!
	deleteComment(commentId: ID!): Comment!
}
type Subscription {
	count: Int!
	comment(postId: ID!): CommentSubscriptionPayload!
	post: PostSubscriptionPayload!
	usersPost(userId: ID!): PostSubscriptionPayload!
}
input CreateUserInput {
	name: String!
	email: String!
	age: Int
}
input UpdateUserInput {
	name: String
	email: String
	age: Int
}
input CreatePostInput {
	title: String!
	body: String
	published: Boolean!
	author: ID!
}
input UpdatePostInput {
	title: String
	body: String
	published: Boolean
}
input CreateCommentInput {
	text: String!
	author: ID!
	postId: ID!
}
input UpdateCommentInput {
	text: String
}
type User {
	id: ID!
	name: String!
	email: String!
	age: Int
	posts: [Post!]!
	comments: [Comment!]!
}
type Post {
	id: ID!
	title: String!
	body: String
	published: Boolean!
	author: User!
	comments: [Comment!]!
}
type Comment {
	id: ID!
	text: String!
	author: User!
	post: Post!
}
enum MutationType {
	CREATED
	UPDATED
	DELETED
}
type PostSubscriptionPayload {
	mutation: MutationType!
	data: Post!
}
type CommentSubscriptionPayload {
	mutation: MutationType!
	data: Comment!
}
